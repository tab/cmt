// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/logger/logger.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/logger/logger.go -destination=internal/config/logger/logger_mock.go -package=logger
//

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"
	time "time"

	zerolog "github.com/rs/zerolog"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug))
}

// Error mocks base method.
func (m *MockLogger) Error() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error))
}

// Info mocks base method.
func (m *MockLogger) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info))
}

// Warn mocks base method.
func (m *MockLogger) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn))
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Dur mocks base method.
func (m *MockEvent) Dur(key string, value time.Duration) Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dur", key, value)
	ret0, _ := ret[0].(Event)
	return ret0
}

// Dur indicates an expected call of Dur.
func (mr *MockEventMockRecorder) Dur(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dur", reflect.TypeOf((*MockEvent)(nil).Dur), key, value)
}

// Err mocks base method.
func (m *MockEvent) Err(err error) Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(Event)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockEventMockRecorder) Err(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockEvent)(nil).Err), err)
}

// Int mocks base method.
func (m *MockEvent) Int(key string, value int) Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", key, value)
	ret0, _ := ret[0].(Event)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockEventMockRecorder) Int(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockEvent)(nil).Int), key, value)
}

// Msg mocks base method.
func (m *MockEvent) Msg(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Msg", msg)
}

// Msg indicates an expected call of Msg.
func (mr *MockEventMockRecorder) Msg(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockEvent)(nil).Msg), msg)
}

// Msgf mocks base method.
func (m *MockEvent) Msgf(format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Msgf", varargs...)
}

// Msgf indicates an expected call of Msgf.
func (mr *MockEventMockRecorder) Msgf(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msgf", reflect.TypeOf((*MockEvent)(nil).Msgf), varargs...)
}

// Str mocks base method.
func (m *MockEvent) Str(key, value string) Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Str", key, value)
	ret0, _ := ret[0].(Event)
	return ret0
}

// Str indicates an expected call of Str.
func (mr *MockEventMockRecorder) Str(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Str", reflect.TypeOf((*MockEvent)(nil).Str), key, value)
}
