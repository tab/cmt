// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/commands/commit.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/commands/commit.go -destination=internal/app/commands/commit_mock.go -package=commands
//

// Package commands is a generated GoMock package.
package commands

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommit is a mock of Commit interface.
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
	isgomock struct{}
}

// MockCommitMockRecorder is the mock recorder for MockCommit.
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance.
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockCommit) Generate(ctx context.Context, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockCommitMockRecorder) Generate(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCommit)(nil).Generate), ctx, args)
}
