// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/commands/changelog.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/commands/changelog.go -destination=internal/app/commands/changelog_mock.go -package=commands
//

// Package commands is a generated GoMock package.
package commands

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChangelog is a mock of Changelog interface.
type MockChangelog struct {
	ctrl     *gomock.Controller
	recorder *MockChangelogMockRecorder
	isgomock struct{}
}

// MockChangelogMockRecorder is the mock recorder for MockChangelog.
type MockChangelogMockRecorder struct {
	mock *MockChangelog
}

// NewMockChangelog creates a new mock instance.
func NewMockChangelog(ctrl *gomock.Controller) *MockChangelog {
	mock := &MockChangelog{ctrl: ctrl}
	mock.recorder = &MockChangelogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangelog) EXPECT() *MockChangelogMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockChangelog) Generate(ctx context.Context, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockChangelogMockRecorder) Generate(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockChangelog)(nil).Generate), ctx, args)
}
