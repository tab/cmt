// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/cli/spinner/spinner.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/cli/spinner/spinner.go -destination=internal/app/cli/spinner/spinner_mock.go -package=spinner
//

// Package spinner is a generated GoMock package.
package spinner

import (
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
	isgomock struct{}
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// Tick mocks base method.
func (m *MockModel) Tick() tea.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick")
	ret0, _ := ret[0].(tea.Msg)
	return ret0
}

// Tick indicates an expected call of Tick.
func (mr *MockModelMockRecorder) Tick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockModel)(nil).Tick))
}

// Update mocks base method.
func (m *MockModel) Update(arg0 tea.Msg) (Model, tea.Cmd) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(Model)
	ret1, _ := ret[1].(tea.Cmd)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockModelMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockModel)(nil).Update), arg0)
}

// View mocks base method.
func (m *MockModel) View() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View")
	ret0, _ := ret[0].(string)
	return ret0
}

// View indicates an expected call of View.
func (mr *MockModelMockRecorder) View() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockModel)(nil).View))
}
