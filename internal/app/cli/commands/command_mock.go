// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/cli/commands/commands.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/cli/commands/commands.go -destination=internal/app/cli/commands/command_mock.go -package=commands
//

// Package commands is a generated GoMock package.
package commands

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
	isgomock struct{}
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommand) Run(ctx context.Context, args []string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, args)
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCommandMockRecorder) Run(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommand)(nil).Run), ctx, args)
}
