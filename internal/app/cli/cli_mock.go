// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/cli/cli.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/cli/cli.go -destination=internal/app/cli/cli_mock.go -package=cli
//

// Package cli is a generated GoMock package.
package cli

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCLI is a mock of CLI interface.
type MockCLI struct {
	ctrl     *gomock.Controller
	recorder *MockCLIMockRecorder
	isgomock struct{}
}

// MockCLIMockRecorder is the mock recorder for MockCLI.
type MockCLIMockRecorder struct {
	mock *MockCLI
}

// NewMockCLI creates a new mock instance.
func NewMockCLI(ctrl *gomock.Controller) *MockCLI {
	mock := &MockCLI{ctrl: ctrl}
	mock.recorder = &MockCLIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCLI) EXPECT() *MockCLIMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCLI) Run(args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCLIMockRecorder) Run(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCLI)(nil).Run), args)
}
