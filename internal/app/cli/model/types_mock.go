// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=types_mock.go -package=model
//

// Package model is a generated GoMock package.
package model

import (
	workflow "cmt/internal/app/cli/workflow"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockworkflowService is a mock of workflowService interface.
type MockworkflowService struct {
	ctrl     *gomock.Controller
	recorder *MockworkflowServiceMockRecorder
	isgomock struct{}
}

// MockworkflowServiceMockRecorder is the mock recorder for MockworkflowService.
type MockworkflowServiceMockRecorder struct {
	mock *MockworkflowService
}

// NewMockworkflowService creates a new mock instance.
func NewMockworkflowService(ctrl *gomock.Controller) *MockworkflowService {
	mock := &MockworkflowService{ctrl: ctrl}
	mock.recorder = &MockworkflowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkflowService) EXPECT() *MockworkflowServiceMockRecorder {
	return m.recorder
}

// GenerateChangelog mocks base method.
func (m *MockworkflowService) GenerateChangelog(ctx context.Context, between string) (workflow.ChangelogResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChangelog", ctx, between)
	ret0, _ := ret[0].(workflow.ChangelogResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChangelog indicates an expected call of GenerateChangelog.
func (mr *MockworkflowServiceMockRecorder) GenerateChangelog(ctx, between any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChangelog", reflect.TypeOf((*MockworkflowService)(nil).GenerateChangelog), ctx, between)
}

// GenerateCommit mocks base method.
func (m *MockworkflowService) GenerateCommit(ctx context.Context, prefix string) (workflow.CommitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCommit", ctx, prefix)
	ret0, _ := ret[0].(workflow.CommitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCommit indicates an expected call of GenerateCommit.
func (mr *MockworkflowServiceMockRecorder) GenerateCommit(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCommit", reflect.TypeOf((*MockworkflowService)(nil).GenerateCommit), ctx, prefix)
}
