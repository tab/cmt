// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/cli/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/cli/interface.go -destination=internal/app/cli/interface_mock.go -package=cli
//

// Package cli is a generated GoMock package.
package cli

import (
	context "context"
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
)

// MockUI is a mock of UI interface.
type MockUI struct {
	ctrl     *gomock.Controller
	recorder *MockUIMockRecorder
	isgomock struct{}
}

// MockUIMockRecorder is the mock recorder for MockUI.
type MockUIMockRecorder struct {
	mock *MockUI
}

// NewMockUI creates a new mock instance.
func NewMockUI(ctrl *gomock.Controller) *MockUI {
	mock := &MockUI{ctrl: ctrl}
	mock.recorder = &MockUIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUI) EXPECT() *MockUIMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUI) Run(args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockUIMockRecorder) Run(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUI)(nil).Run), args)
}

// MockProgram is a mock of Program interface.
type MockProgram struct {
	ctrl     *gomock.Controller
	recorder *MockProgramMockRecorder
	isgomock struct{}
}

// MockProgramMockRecorder is the mock recorder for MockProgram.
type MockProgramMockRecorder struct {
	mock *MockProgram
}

// NewMockProgram creates a new mock instance.
func NewMockProgram(ctrl *gomock.Controller) *MockProgram {
	mock := &MockProgram{ctrl: ctrl}
	mock.recorder = &MockProgramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgram) EXPECT() *MockProgramMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockProgram) Run() (tea.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(tea.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockProgramMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProgram)(nil).Run))
}

// MockgitClient is a mock of gitClient interface.
type MockgitClient struct {
	ctrl     *gomock.Controller
	recorder *MockgitClientMockRecorder
	isgomock struct{}
}

// MockgitClientMockRecorder is the mock recorder for MockgitClient.
type MockgitClientMockRecorder struct {
	mock *MockgitClient
}

// NewMockgitClient creates a new mock instance.
func NewMockgitClient(ctrl *gomock.Controller) *MockgitClient {
	mock := &MockgitClient{ctrl: ctrl}
	mock.recorder = &MockgitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgitClient) EXPECT() *MockgitClientMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockgitClient) Commit(ctx context.Context, msg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockgitClientMockRecorder) Commit(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockgitClient)(nil).Commit), ctx, msg)
}
