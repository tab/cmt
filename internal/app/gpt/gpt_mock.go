// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gpt/gpt.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/gpt/gpt.go -destination=internal/app/gpt/gpt_mock.go -package=gpt
//

// Package gpt is a generated GoMock package.
package gpt

import (
	context "context"
	reflect "reflect"

	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchChangelog mocks base method.
func (m *MockClient) FetchChangelog(ctx context.Context, commits string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchChangelog", ctx, commits)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchChangelog indicates an expected call of FetchChangelog.
func (mr *MockClientMockRecorder) FetchChangelog(ctx, commits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchChangelog", reflect.TypeOf((*MockClient)(nil).FetchChangelog), ctx, commits)
}

// FetchCommitMessage mocks base method.
func (m *MockClient) FetchCommitMessage(ctx context.Context, diff string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCommitMessage", ctx, diff)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCommitMessage indicates an expected call of FetchCommitMessage.
func (mr *MockClientMockRecorder) FetchCommitMessage(ctx, diff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCommitMessage", reflect.TypeOf((*MockClient)(nil).FetchCommitMessage), ctx, diff)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockAPI) CreateChatCompletion(ctx context.Context, request openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, request)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockAPIMockRecorder) CreateChatCompletion(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockAPI)(nil).CreateChatCompletion), ctx, request)
}
